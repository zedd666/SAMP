/*

    [INC] * 2016
    Include feita por - Zedd666
    Base da include mSelection - D0

    Data: 08/01/2016
*/

/* --- Definições --- */
#define MAX_VEH 5
#define MONEY_VEH 16000
#define MAX_ITEMS_LINE 7
#define MAX_TOTAL_ITEMS 140
#define MAX_SELECIONADO_ITEMS 21

/* --- Variáveis --- */
/*new SkinS[MAX_SKINS] =
{
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
    11, 12, 13, 14, 15, 16, 17, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
    31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
    42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
    54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
    67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
    81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
    96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
    110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
    124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
    139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
    155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
    172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
    190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
    209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
    229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
    250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
    272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
    295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310
};  */
new ItemList[MAX_TOTAL_ITEMS] =
{
    400, 401, 402, 403, 404, 405, 409,
    410, 411, 412, 413, 415, 418, 419, 421,
    422, 424, 426, 429, 431, 434, 436, 437, 439,
    440, 443, 444, 445, 446, 447, 451, 452, 453, 454,
    456, 457, 458, 459, 461, 462, 463, 466, 467, 468, 469,
    470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482,
    483, 484, 487, 489, 491, 492, 493, 494, 495, 496, 498, 499, 500,
    502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
    516, 517, 518, 519, 521, 522, 526, 527, 529, 531, 533, 534, 535, 536, 539,
    540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 554, 555, 556, 557, 558, 559,
    560, 561, 562, 563, 565, 566, 567, 568, 571, 572, 575, 576, 578, 579, 580, 581, 585, 587, 589, 593, 595, 600, 602, 603, 609
};
new ItemAt[MAX_VEH], gTotal = MAX_TOTAL_ITEMS,
PlayerText:CurrentPageTextDrawId[MAX_PLAYERS],  PlayerText:HeaderTextDrawId[MAX_PLAYERS], PlayerText:BackgroundTextDrawId[MAX_PLAYERS],
PlayerText:NextButtonTextDrawId[MAX_PLAYERS], PlayerText:PrevButtonTextDrawId[MAX_PLAYERS], PlayerText:SelectionItems[MAX_PLAYERS][MAX_SELECIONADO_ITEMS], SelectionItemsTag[MAX_PLAYERS][MAX_SELECIONADO_ITEMS];

/* --- TextDraws --- */
PlayerText:CreateCurrentPageTextDraw(playerid, Float:Xpos, Float:Ypos)
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, "0/0");
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

PlayerText:CreatePlayerDialogButton(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height, button_text[])
{
 	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, button_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 1);
   	PlayerTextDrawBoxColor(playerid, txtInit, 0x000000FF);
   	PlayerTextDrawBackgroundColor(playerid, txtInit, 0x000000FF);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 0);
    PlayerTextDrawColor(playerid, txtInit, 0x4A5A6BFF);
    PlayerTextDrawSetSelectable(playerid, txtInit, 1);
    PlayerTextDrawAlignment(playerid, txtInit, 2);
    PlayerTextDrawTextSize(playerid, txtInit, Height, Width);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

PlayerText:CreatePlayerHeaderTextDraw(playerid, Float:Xpos, Float:Ypos, header_text[])
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, header_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 1.25, 3.0);
	PlayerTextDrawFont(playerid, txtInit, 0);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

PlayerText:CreatePlayerBGTextDraw(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height, bgcolor)
{
	new PlayerText:txtBackground = CreatePlayerTextDraw(playerid, Xpos, Ypos,"                                            ~n~");
    PlayerTextDrawUseBox(playerid, txtBackground, 1);
    PlayerTextDrawBoxColor(playerid, txtBackground, bgcolor);
	PlayerTextDrawLetterSize(playerid, txtBackground, 5.0, 5.0);
	PlayerTextDrawFont(playerid, txtBackground, 0);
	PlayerTextDrawSetShadow(playerid, txtBackground, 0);
    PlayerTextDrawSetOutline(playerid, txtBackground, 0);
    PlayerTextDrawColor(playerid, txtBackground,0x000000FF);
    PlayerTextDrawTextSize(playerid, txtBackground, Width, Height);
   	PlayerTextDrawBackgroundColor(playerid, txtBackground, bgcolor);
    PlayerTextDrawShow(playerid, txtBackground);
    return txtBackground;
}

PlayerText:CreateMPTextDraw(playerid, modelindex, Float:Xpos, Float:Ypos, Float:width, Float:height)
{
    new PlayerText:txtPlayerSprite = CreatePlayerTextDraw(playerid, Xpos, Ypos, "");
    PlayerTextDrawFont(playerid, txtPlayerSprite, TEXT_DRAW_FONT_MODEL_PREVIEW);
    PlayerTextDrawColor(playerid, txtPlayerSprite, 0xFFFFFFFF);
    PlayerTextDrawBackgroundColor(playerid, txtPlayerSprite, 0x4A5A6BBB);
    PlayerTextDrawTextSize(playerid, txtPlayerSprite, width, height);
    PlayerTextDrawSetPreviewModel(playerid, txtPlayerSprite, modelindex);
    PlayerTextDrawSetPreviewRot(playerid,txtPlayerSprite, -16.0, 0.0, -55.0);
    PlayerTextDrawSetSelectable(playerid, txtPlayerSprite, 1);
    PlayerTextDrawShow(playerid,txtPlayerSprite);
    return txtPlayerSprite;
}

/* --- Callbacks --- */
/*public OnPlayerConnect(playerid)
{
    for(new x=0; x < MAX_SELECIONADO_ITEMS; x++)
    {
        SelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
    }

    HeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    BackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    CurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    NextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    PrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;

    ItemAt[playerid] = 0;
    return 1;
} */

/*public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(GetPVarInt(playerid, "Ativado") == 0)
        return 0;

    new listid = GetPVarInt(playerid, "Paginas");
    if(playertextid == NextButtonTextDrawId[playerid])
    {
        if(listid < (PaginasEX() - 1))
        {
            ShowPlayerMPs(playerid);
            UpdatePageTextDraw(playerid);

            SetPVarInt(playerid, "Paginas", listid+1);
            PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
        }
        return 1;
    }
    if(playertextid == PrevButtonTextDrawId[playerid])
    {
        if(listid > 0)
        {
            ShowPlayerMPs(playerid);
            UpdatePageTextDraw(playerid);

            SetPVarInt(playerid, "Paginas", listid-1);
            PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
        }
        return 1;
    }
    for(new x=0; x < MAX_SELECIONADO_ITEMS; x++)
    {
        new str[109];
        if(GetPlayerMoney(playerid) < 16000)
            return format(str, sizeof(str), "[SERVER]: {DFDFDF}Infelizmente você não tem R$%d para compra este veículo", MONEY_VEH), SendClientMessage(playerid, 0x00FF00AA, str);

        if(playertextid == SelectionItems[playerid][x])
        {
            DestroySelectionMenu(playerid);
            CancelSelectTextDraw(playerid);

            VehicleBuySpawn(playerid, x);
            PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);

            SetPVarInt(playerid, "Ativado", 0);
            return 1;
        }
        x++;
    }
    return 0;
}*/

/*public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(GetPVarInt(playerid, "Ativado") == 0)
        return 0;

    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
        DestroySelectionMenu(playerid);

        SetPVarInt(playerid, "Ativado", 0);
        PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
        return 0;
    }
    return 1;
}*/

/* --- Stocks --- */
stock PaginasEX()
{
    if((gTotal >= MAX_SELECIONADO_ITEMS) && (gTotal % MAX_SELECIONADO_ITEMS) == 0)
    {
        return (gTotal / MAX_SELECIONADO_ITEMS);
    }
    else return (gTotal / MAX_SELECIONADO_ITEMS) + 1;
}

stock DestroyPlayerMPs(playerid)
{
    new i = 0;
    while(i != MAX_SELECIONADO_ITEMS)
    {
        if(SelectionItems[playerid][i] != PlayerText:INVALID_TEXT_DRAW)
        {
            PlayerTextDrawDestroy(playerid, SelectionItems[playerid][i]);
            SelectionItems[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
        }
        i++;
    }
}

stock ShowPlayerMPs(playerid)
{
    new i = 0, Float:X = 75.0, Float:Y = 130.0 - (70.0*0.33), Line = 0;
    new itemat = (GetPVarInt(playerid, "Paginas") * MAX_SELECIONADO_ITEMS);

    DestroyPlayerMPs(playerid);
    while(i != MAX_SELECIONADO_ITEMS && itemat < gTotal)
    {
        if(Line == 0)
        {
            X = 75.0 + 25.0;
            Y += 70.0 + 1.0;
        }

        SelectionItems[playerid][i] = CreateMPTextDraw(playerid, ItemList[itemat], X, Y, 60.0, 70.0);
		SelectionItemsTag[playerid][i] = ItemList[itemat];

        X += 60.0 + 1.0;
        Line++;

        if(Line == MAX_ITEMS_LINE) Line = 0;
        itemat++;
        i++;
    }
}

stock UpdatePageTextDraw(playerid)
{
    new PageText[64+1];
    format(PageText, 64, "%d/%d", GetPVarInt(playerid, "Paginas") + 1, PaginasEX());
    PlayerTextDrawSetString(playerid, CurrentPageTextDrawId[playerid], PageText);
}

stock ShowSelectionModelMenu(playerid)
{

    BackgroundTextDrawId[playerid] = CreatePlayerBGTextDraw(playerid, 75.0, 130.0 + 20.0, 550.0, 180.0, 0x4A5A6BBB);
    HeaderTextDrawId[playerid] = CreatePlayerHeaderTextDraw(playerid, 75.0, 130.0, "Concessionaria:");
    CurrentPageTextDrawId[playerid] = CreateCurrentPageTextDraw(playerid, 550.0 - 30.0, 130.0 + 15.0);
    NextButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, 550.0 - 30.0, 130.0+180.0+100.0, 50.0, 16.0, "Proximo");
    PrevButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, 550.0 - 90.0, 130.0+180.0+100.0, 50.0, 16.0, "Anterior");

    ShowPlayerMPs(playerid);
    UpdatePageTextDraw(playerid);

    SendClientMessage(playerid, 0x00FFFFAA, "[SERVER]: {DFDFDF}Para você sair da lista de veículo aperte 'ESC'");
}

stock HideSelectionModelMenu(playerid)
{
	DestroySelectionMenu(playerid);
	SetPVarInt(playerid, "mS_ignore_next_esc", 1);
	CancelSelectTextDraw(playerid);
}

stock DestroySelectionMenu(playerid)
{
    DestroyPlayerMPs(playerid);

	PlayerTextDrawDestroy(playerid, HeaderTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, BackgroundTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, CurrentPageTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, NextButtonTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, PrevButtonTextDrawId[playerid]);

	HeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
	BackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
	CurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
	NextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
	PrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
}
